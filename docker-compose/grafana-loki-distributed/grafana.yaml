# NOTE: All loki component share the same config.

version: '3.8'
services:
  grafana:
    # default admin user credentials are admin/admin.
    image: grafana/grafana-oss:9.5.6-ubuntu
    container_name: grafana
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "6831:6831/udp"
      - "3000:3000"
    restart: on-failure
    volumes:
      - ./docker-data/grafana-data:/var/lib/grafana
    depends_on:
      - loki-query-frontend

  loki-ingester: # stateful
    image: grafana/loki:2.8.4
    container_name: loki-ingester
    user: "10001:10001"
    volumes:
      - ./config/loki/loki.yaml:/etc/loki/loki.yaml:ro
      - ./config/loki/runtime.yaml:/var/loki-runtime/runtime.yaml:ro
      - ./docker-data/loki-ingester/data:/data # see common.path_prefix, ingester.wal.dir, storage_config.tsdb_shipper.active_index_directory
    command: "-config.file=/etc/loki/loki.yaml -target=ingester"
    depends_on:
      - minio

  loki-distributor: # stateless
    image: grafana/loki:2.8.4
    container_name: loki-distributor
    user: "10001:10001"
    volumes:
      - ./config/loki/loki.yaml:/etc/loki/loki.yaml:ro
      - ./config/loki/runtime.yaml:/var/loki-runtime/runtime.yaml:ro
    ports:
      - "3100:3100"
      - "7946:7946"
    command: "-config.file=/etc/loki/loki.yaml -target=distributor"

  loki-query-frontend: # stateless
    image: grafana/loki:2.8.4
    container_name: loki-query-frontend
    user: "10001:10001"
    volumes:
      - ./config/loki/loki.yaml:/etc/loki/loki.yaml:ro
      - ./config/loki/runtime.yaml:/var/loki-runtime/runtime.yaml:ro
    command: "-config.file=/etc/loki/loki.yaml -target=query-frontend"

  # assume stateless, because in this example it uses Keda and using Deployment instead StatefulSet
  # https://github.com/grafana/loki/blob/v2.8.3/docs/sources/operations/autoscaling_queriers.md?plain=1#L109
  # So
  loki-query-scheduler: # stateless
    image: grafana/loki:2.8.4
    container_name: loki-query-scheduler
    user: "10001:10001"
    volumes:
      - ./config/loki/loki.yaml:/etc/loki/loki.yaml:ro
      - ./config/loki/runtime.yaml:/var/loki-runtime/runtime.yaml:ro
    command: "-config.file=/etc/loki/loki.yaml -target=query-scheduler"

  loki-querier:
    image: grafana/loki:2.8.4
    container_name: loki-querier
    user: "10001:10001"
    volumes:
      - ./config/loki/loki.yaml:/etc/loki/loki.yaml:ro
      - ./config/loki/runtime.yaml:/var/loki-runtime/runtime.yaml:ro
      - ./docker-data/loki-querier/data:/data # see common.path_prefix
    command: "-config.file=/etc/loki/loki.yaml -target=querier"
    depends_on:
      - minio

  loki-index-gateway:
    image: grafana/loki:2.8.4
    container_name: loki-index-gateway
    user: "10001:10001"
    volumes:
      - ./config/loki/loki.yaml:/etc/loki/loki.yaml:ro
      - ./config/loki/runtime.yaml:/var/loki-runtime/runtime.yaml:ro
      - ./docker-data/loki-index-gateway/data:/data
    command: "-config.file=/etc/loki/loki.yaml -target=index-gateway"

  loki-ruler:
    image: grafana/loki:2.8.4
    container_name: loki-ruler
    user: "10001:10001"
    volumes:
      - ./config/loki/loki.yaml:/etc/loki/loki.yaml:ro
      - ./config/loki/runtime.yaml:/var/loki-runtime/runtime.yaml:ro
      - ./docker-data/loki-ruler/data:/data # see common.path_prefix, ruler.wal.dir, ruler.storage.local.directory
    command: "-config.file=/etc/loki/loki.yaml -target=ruler"

  loki-compactor:
    image: grafana/loki:2.8.4
    container_name: loki-compactor
    user: "10001:10001"
    volumes:
      - ./config/loki/loki.yaml:/etc/loki/loki.yaml:ro
      - ./config/loki/runtime.yaml:/var/loki-runtime/runtime.yaml:ro
      - ./docker-data/loki-compactor/data:/data # see compactor.working_directory
    command: "-config.file=/etc/loki/loki.yaml -target=compactor"

  minio:
    image: minio/minio:RELEASE.2023-07-18T17-49-40Z
    container_name: minio
    command: server /data --address ':9000' --console-address ':9001'
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ACCESS_KEY="minio-access-key"
      - MINIO_SECRET_KEY="minio-secret-key"
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - ./docker-data/minio-data:/data
